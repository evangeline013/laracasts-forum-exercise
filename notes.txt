# Forum

1. Thread
2. Reply
3. User

A. Thread is created by a user
B. A reply belongs to a thread, and belongs to a user.



Lesson 1
--create models, controlers, and migration files for Thread, Reply, and User
--set up database forum
--set up factories for Thread, Reply, and User
--whip up seed data for user, thread, and reply tables
  $threads = factory('App\Thread', 50 )->make()
  $threads->each (function ($thread) {
    factory('App\Reply',10)->create(['thread_id' => $thread->id]); //we don't want auto-generate new thread_id for the reply
    } );

Lesson 2
--set up a feature test: a user can view a thread
--change database connection in phpunit to sqlite
--use trait RefreshDatabase on test class, so the database will be reset after each test.
  trait RefreshDatabase does:
  1. For every test, it will migrate the database if anything needs to be migrated.
  2. Once the test is done, it will roll it back (migrate:rollback) to undo any changes to database.
--why using test class to do the testing instead of checking in browser?

  You could, but the idea is that as you build more complex functionality later in the project, you don't want to have
  to test all existing functionality manually (in this case, loading up a browser) to check you haven't broken existing
  stuff as you have developed new stuff. In any case this test will effectively do the same thing as checking it in a
  browser with your own eyes, except now you have it as part of a test suite that you can run any time to verify your
  stuff still works

  And it becomes very crucial when you have a big project in production, and you make some changes. Then you can't go
  testing every single screen manually in a browser to make sure nothing breaks. With tests you can merge new features
  in, run tests and if you get green you are good, otherwise you get exactly the tests that failed and you know where
  to look for the problem.. I have a project like that and I wish I had written tests beforehand.. TDD ensures that you
  write testable code..
--set up routes for /threads
--create view for threads index
--php artisan make:auth --> we can use the default format from the files
--split assertions into different tests so it's easier to debug which assertion caused the error
--use path() over route(): if changes the paramater used to route, need to change the views as well.